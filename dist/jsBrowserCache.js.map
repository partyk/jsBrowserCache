{"version":3,"sources":["JsBrowserCache.js"],"names":["JsBrowserCache","options","_classCallCheck","this","console","info","_options","Object","assign","prefix","storage","_seconds","_setStorage","testSupportsStorage","key","undefined","_supportsStorage","_storage","_setItem","_removeItem","e","warn","_IsExceptionOutOfSpace","length","value","expiration","record","actualTimeStamp","Date","getTime","isSupportsStorage","_jsonToString","create","expire","clearExpirate","_getItem","_stringToJson","log","keys","_this","filter","v","indexOf","i","replace","storageName","localStorage","sessionStorage","removeItem","json","JSON","stringify","string","parse","name"],"mappings":"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","file":"JsBrowserCache.js","sourcesContent":["/**\n * @class JsBrowserCache\n * JsBrowserCache je trida na ukladani a ziskavani dat z localStorage a sessionStorage s moznosti expirace zaznamu ve storage\n */\nexport default class JsBrowserCache {\n    \n    /**\n     * @constructor\n     * @param {Object} options nastaveni\n     * @example\n     *  {\n     *      prefix: 'cache-', // Nasatveni prefixu. Defaultni hodnota je 'cache-'.Prefix se bude pridavat k ID zaznamu, ktery se bude ukladat do storage\n     *      storage: 'session', // Nasatveni typu uloziste. Defaultni hodnota je 'local'. 'local' je pro nastaveni localStorage a 'session' je pro nastaveni sessionStorage\n     *  }\n     */\n    constructor(options) {\n        console.info('Creat object JsBrowserCache');\n\n        /**\n         * nastaveni tridy\n         * @private\n         * @type {Object}\n         */\n        this._options = Object.assign({}, {\n            prefix : 'cache-',\n            storage: 'local'\n\n        }, options || {});\n\n        /**\n         * pomocna promena pro prepocet z milisekund na sekundy\n         * @private\n         * @type {Number}\n         */\n        this._seconds = 1*1000;\n\n        //nastavim storage\n        this._setStorage();\n\n        //otestuji podporu storage\n        this.testSupportsStorage()\n    }\n\n    /**\n     * metoda testuje prohlizec na podporu storage\n     * @public\n     * @returns {Boolean}\n     */\n    testSupportsStorage() {\n        //vytvorim unikatni klic\n        let key = 'j8EiBTWwQV',\n            value = key;\n\n        //pokud jsem jiz testoval, tak nemusim znova\n        if (this._supportsStorage !== undefined) {\n            return this._supportsStorage;\n        }\n        \n        //otestuji jestli existuje kurzor na storage\n        if (!this._storage) {\n            return this._supportsStorage  = false;\n        }       \n    \n        try {\n            //spravnou funkcnost otestuji zapisem a ctenim z storage\n            this._setItem(key, value);\n            this._removeItem(key);\n            this._supportsStorage = true; //pokud projde zapis a cteni nastavim podporu na true\n        } catch (e) {\n            console.warn(e);\n            //otestuji jestli neni storage plna\n            if (this._IsExceptionOutOfSpace(e) && this._storage.length) {\n                this._supportsStorage  = true;\n            } else {\n                this._supportsStorage  = false;\n            }\n        }\n        return this._supportsStorage;\n    }\n\n    /**\n     * vrati true pokud prohlizec podporuje storage\n     * @public\n     * @returns {Boolean} \n     */\n    isSupportsStorage() {\n        if (!this._supportsStorage) {\n            console.warn('Browser does not support storage');\n        }\n        return this._supportsStorage;\n    }\n    \n    /**\n     * zapise hodnotu do storage\n     * \n     * @public\n     * \n     * @param {String} key unikatni klic zaznamu ve storage\n     * @param {String|Array|Object|Number} value hodnota muze byt String, Array, Json, Number\n     * @param {Number} expiration je nepovinny parametr a udava se v sekundach.\n     * \n     * @example\n     *  var cache = new JsBrowserCache();\n     *      cache.setItem('test1', 'test string');  \n     *      cache.setItem('test2', 'test string', 60); //expire 60 seconds   \n     * \n     * @returns {Bool} vrati hodntu true pokud se hodnota zapise do storage\n     */\n    setItem(key, value, expiration) {\n        let record,\n            actualTimeStamp = new Date().getTime();\n        \n        //otestuji jestli je podporovana storage\n        if(!this.isSupportsStorage()) {\n            return false;\n        }\n\n        console.info('Actual time stamp: ' + actualTimeStamp);\n        console.info('Expire: ' + (expiration ? actualTimeStamp + expiration*1*this._seconds : ''));\n\n        record = {\n            value: this._jsonToString(value),\n            create: actualTimeStamp,\n            expire: expiration ? actualTimeStamp + expiration*1*this._seconds : ''\n        }\n\n        console.info(record);\n\n        try {\n            this._removeItem(key);\n            this._setItem(key, this._jsonToString(record));\n            return true;\n        } catch (e) {\n            console.warn(e);\n            //zachytavam vyjimku pro pripad ze jeplna storage\n            if (this._IsExceptionOutOfSpace(e) && this._storage.length) {\n                this.clearExpirate();\n                this._setItem(key, this._jsonToString(record));\n                //a otestuji jestli se zapsala a vratim Bool\n                return !!this._getItem(key);\n            } else {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * vrati hodnotu ze storage na zaklade zadaneho klice.\n     * @public\n     * @param {String} key klic zaznamu\n     *  \n     * @example\n     *  var cache = new JsBrowserCache();\n     *      cache.getItem('test');\n     * \n     * @returns {String|Array|Object|Number|Null} pokud klic neexistuje vratÃ­ null jinak vrati zapsanou hodnotu ve storage\n     */\n    getItem(key) {\n        let record;\n    \n        //otestuji jestli je podporovana storage\n        if(!this.isSupportsStorage()) {\n            return null;\n        }\n\n        //ziskam zaznma ze storage\n        record = this._getItem(key);\n\n        console.info(record);\n\n        //zjistim jestli polozka existuje\n        if(!record) {\n            return null;\n        }\n\n        //prevedu string na json\n        record = this._stringToJson(record);\n\n        console.info(record);\n\n        //otestuji jestli je polozka expirovana\n        if(record.expire && new Date().getTime() > record.expire) {\n            console.log('Item \"' + key + '\" is expired. Item is removed.');\n            this._removeItem(key);\n            return null;\n        } else {\n            return this._stringToJson(record.value);\n        }       \n    }\n\n    /**\n     * vymaze expirovane zaznamy ze storage\n     * @public\n     * \n     * @example\n     *  var cache = new JsBrowserCache();\n     *      cache.clearExpired();\n     * \n     */\n    clearExpired() {\n        let keys;\n        \n        //otestuji jestli je podporovana storage\n        if(!this.isSupportsStorage()) {\n            return null;\n        }\n\n        //pokud je neco v storage, tak pokracuji\n        if (this._storage.length > 0) {\n\n            //ziskam vsechny klice ktere odpovidaji prefixu\n            keys = Object.keys(this._storage).filter( v => v.indexOf(this._options.prefix)===0 );\n\n            if (keys.length > 0) {\n                for (let i = 0, length = keys.length; i < length; i++){\n                    let key = keys[i].replace(this._options.prefix,''), //odeberu u klice prefix\n                        record = this._stringToJson(this._getItem(key)); \n\n                    //otestuji jestli je polozka expirovana\n                    if(record.expire && new Date().getTime() > record.expire) {\n                        console.info('Item \"' + key + '\" is expired. Item is removed.'); \n                        this._removeItem(key);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * nastavi storage (local|session) local = localStorage, session = sessionStorage\n     * @private\n     * @param {String} storage nazev storage (local|session) \n     */\n    _setStorage(storageName) {\n        try {\n            this._storage = storageName !== 'session' ? localStorage : sessionStorage;\n        } catch(e) {\n            this._storage = false;\n        }\n    }\n\n    /**\n     * ulozi zaznam do storage\n     * @private\n     * @param {String} key klic\n     * @param {String} value hodnota klice\n     */\n    _setItem(key, value) {\n        this._storage.setItem(this._options.prefix + key, value);\n    }\n\n    /**\n     * vrati zaznam ze storage\n     * @private\n     * @param {String} key klic\n     * @returns {String|Null} vrati hodntou klice jako string. Pokud klic neexistuje vrati Null\n     */\n    _getItem(key) {\n        return this._storage.getItem(this._options.prefix + key);\n    }\n\n    /**\n     * smaze zaznam ve storage\n     * @private\n     * @param {String} key \n     */\n    _removeItem(key) {\n        this._storage.removeItem(this._options.prefix + key);\n    }\n\n    /**\n     * prevede json na string\n     * @private\n     * @param {Object} json\n     * @returns {String} \n     */\n    _jsonToString(json) {\n        return JSON.stringify(json);\n    }\n\n    /**\n     * prevede string na json\n     * @private\n     * @param {String} string \n     * @returns {Object}\n     */\n    _stringToJson(string) {\n        return JSON.parse(string);\n    }\n\n    /**\n     * otestuje jestli je vyvolanÃ¡ vyjÃ­mka na plnÃ½ storge\n     * @private\n     * @param {Object} e exception\n     * @returns {Bool}\n     */\n    _IsExceptionOutOfSpace(e) {\n        return (e && e.name === 'QUOTA_EXCEEDED_ERR' ||\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED' ||\n            e.name === 'QuotaExceededError');\n    }\n}"]}